---
layout: post
title:  "Write Inkspot, not Game of Life"
date:   2024-02-23 12:30:48 -0500
categories: jekyll update
permalink: /inkspot
---

Last Spring I was dawdling in a [bookstore](https://www.greymatterbookstore.com/), and happened across this [1987 book](https://mitpress.mit.edu/9780262526319/cellular-automata-machines/) about cellular automata. I had recently begun learning some graphics programming and thought this would be a great source of prompts. I gazed upon the book, which provided a sort of cellular automata version of "Hello, World"...no, not [Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) - Inkspot! Inkspot was the perfect hook - it has basically one rule that when implemented made me feel like a genius, despite doing very little. I can't ask for much more out of a first project!

There are a lot of different things someone might want out of a cellular automata tutorial, but for me I was looking for low effort, high aesthetic output. Game of Life is a beautiful thing, it is [Turing complete](https://en.wikipedia.org/wiki/Turing_completeness), we live in awe of its complexity, but sometimes...for me... it's just not as fun to watch as a splotch of ink growing...that's all.

Game of Life isn't really that much more complicated to implement, in fact Inkspot is considered "[Life-like](https://en.wikipedia.org/wiki/Life-like_cellular_automaton)", and has even been given the less cute name "[Life without Death](https://en.wikipedia.org/wiki/Life_without_Death)" after first being published in the book, but check this out!

## Inkspot Rules
<p style="text-align: center; font-weight: bold"> If a cell has 3 neighbors, that cell is alive. All cells stay alive. That's all!</p>
<div id="Plain" class="canvas-div" style="width: min(500px, calc(90vw - 5px)); height: min(500px, calc(90vw - 5px));">
</div>
I think the simplicity of this rule leaves room for a beginner to intuitively grasp how to create rules for desired behaviors. The goal here is to understand how a few simple rules can create a dramatic visual effect.
<p style="text-align: center; font-weight: bold">What if the cells gain color the longer they're alive?</p>
<div id="Age" class="canvas-div" style="width: min(500px, calc(90vw - 5px)); height: min(500px, calc(90vw - 5px));">
</div>
<p style="text-align: center; font-weight: bold">Or they die after they get too old?<p>
<div id="Die" class="canvas-div" style="width: min(500px, calc(90vw - 5px)); height: min(500px, calc(90vw - 5px));">
</div>

<p style="text-align: center; font-weight: bold;">I'd love to see other variations.</p>

Ultimately this is a matter of aesthetic and personal preference. What are you trying to learn? I think if you are writing your first cellular automata, with the intrinsic motivation of making cool graphics, implement Inkspot. To me, Inkspot leaves room for expanding its rules based on intuition, teaching the beginner how to use rules to describe a behavior they'd like to see. 
<br><br>
I'd love to see more tutorials for Inkspot (this wasn't exactly a tutorial), and other simple cellular automata. There can be a tendency for beginner tutorials in all subjects to stagnate around the same few examples, which sometimes I find discouraging as a learner. This is why I'm trying to throw Inkspot into the mix. Maybe one day it will get so popular it stops being exciting!
  <script type="importmap">
    {
          "imports": {
            "three": "https://unpkg.com/three@0.158/build/three.module.js",
            "three/addons/": "https://unpkg.com/three@0.158/examples/jsm/",
            "postprocessing": "https://cdn.jsdelivr.net/npm/postprocessing@6.33.3/+esm"
          }
        }
      </script>
  <script id="vertexShader" type="x-shader/x-vertex">
    varying vec2 vUvs;
      
      void main() {
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          vUvs = uv;
      }
</script>
  <script id="fragmentShaderScreen" type="x-shader/x-fragment">

    precision mediump float;
      //Our input texture
      uniform sampler2D uTexture; 
      uniform sampler2D uTextureTwo;
        varying vec2 vUvs;
        uniform vec2 uResolution;
        uniform vec2 uMouse;
      
      void main() {
          //special method to sample from texture
          vec2 normMouse = uMouse/uResolution;
          vec4 initTexture = texture2D(uTexture, vUvs);
          vec4 helloTexture = texture2D(uTextureTwo, vUvs);
          vec2 st = gl_FragCoord.xy / uResolution.xy;
      
          vec3 colour = initTexture.rgb;

          if(helloTexture.r > 0. && initTexture.r != 0.){
            colour = initTexture.rgb;
          }
      
          gl_FragColor = vec4(colour, 1.0);
          //gl_FragColor = vec4(normMouse.x, normMouse.y, 1.,1.);
      
      }
</script>

  <script id="fragmentShaderBufferPlain" type="x-shader/x-fragment">

    precision mediump float;
      //Our input texture
      uniform sampler2D uTexture; 
      uniform sampler2D uTextureTwo; 
      uniform vec2 uResolution;
      uniform vec2 uMouse;
        varying vec2 vUvs;

        float GetNeighbours(vec2 p) {
          float count = 0.0;
      
          for(float y = -1.0; y <= 1.0; y++) {
              for(float x = -1.0; x <= 1.0; x++) {
      
                  if(x == 0.0 && y == 0.0)
                      continue;
      
                  // Scale the offset down
                  vec2 offset = vec2(x, y) / uResolution.xy;	
                  // Apply offset and sample texture	 
                  vec4 lookup = texture2D(uTexture, p + offset); 
                   // Accumulate the result
                  count += lookup.r > 0.0 ? 1.0 : 0.0;
              }
          }
      
          return count;
      }

      void main() {

      vec2 normMouse = vec2(uMouse.x, abs(uMouse.y - uResolution.y));
      normMouse = normMouse/uResolution;
      vec2 normCoord = gl_FragCoord.xy/uResolution;
      vec3 color = vec3(0.0);
      float neighbors = 0.0;

      neighbors += GetNeighbours(vUvs);
      
      color = texture2D(uTexture, vUvs).rgb;
      vec2 checkMouse = normMouse - normCoord;
      float alpha = 1.0;
        
        if(abs(checkMouse.x) < .003 && abs(checkMouse.y) < .003){
          color = vec3(1.);
        }
        
        if(neighbors == 3.){
          color = vec3(1.);
        }

      gl_FragColor = vec4(color, alpha);
      }
          </script>
          
  <script id="fragmentShaderBufferAge" type="x-shader/x-fragment">

    precision mediump float;
      //Our input texture
      uniform sampler2D uTexture; 
      uniform sampler2D uTextureTwo; 
      uniform vec2 uResolution;
      uniform vec2 uMouse;
        varying vec2 vUvs;

        float GetNeighbours(vec2 p) {
          float count = 0.0;
      
          for(float y = -1.0; y <= 1.0; y++) {
              for(float x = -1.0; x <= 1.0; x++) {
      
                  if(x == 0.0 && y == 0.0)
                      continue;
      
                  // Scale the offset down
                  vec2 offset = vec2(x, y) / uResolution.xy;	
                  // Apply offset and sample texture	 
                  vec4 lookup = texture2D(uTexture, p + offset); 
                   // Accumulate the result
                  count += lookup.r > 0.0 ? 1.0 : 0.0;
              }
          }
      
          return count;
      }

      void main() {

      vec2 normMouse = vec2(uMouse.x, abs(uMouse.y - uResolution.y));
      normMouse = normMouse/uResolution;
      vec2 normCoord = gl_FragCoord.xy/uResolution;
      vec3 color = vec3(0.0);
      float neighbors = 0.0;

      neighbors += GetNeighbours(vUvs);
      
      color = texture2D(uTexture, vUvs).rgb;
      vec2 checkMouse = normMouse - normCoord;
      float alpha = 1.0;
        
        if(abs(checkMouse.x) < .003 && abs(checkMouse.y) < .003){
          color = vec3(0.01,0.,0.);
        }
        
        if(color.r > 0. && color.r < 1.){
          color = color + vec3(.01,0.,0.);
        } else if(neighbors == 3.){
          color = vec3(.01);
        }
        

      gl_FragColor = vec4(color, alpha);
      }
          </script>
          
  <script id="fragmentShaderBufferDie" type="x-shader/x-fragment">

    precision mediump float;
      //Our input texture
      uniform sampler2D uTexture; 
      uniform sampler2D uTextureTwo; 
      uniform vec2 uResolution;
      uniform vec2 uMouse;
        varying vec2 vUvs;

        float GetNeighbours(vec2 p) {
          float count = 0.0;
      
          for(float y = -1.0; y <= 1.0; y++) {
              for(float x = -1.0; x <= 1.0; x++) {
      
                  if(x == 0.0 && y == 0.0)
                      continue;
      
                  // Scale the offset down
                  vec2 offset = vec2(x, y) / uResolution.xy;	
                  // Apply offset and sample texture	 
                  vec4 lookup = texture2D(uTexture, p + offset); 
                   // Accumulate the result
                  count += lookup.g > 0.0 ? 1.0 : 0.0;
              }
          }
      
          return count;
      }

      void main() {

      vec2 normMouse = vec2(uMouse.x, abs(uMouse.y - uResolution.y));
      normMouse = normMouse/uResolution;
      vec2 normCoord = gl_FragCoord.xy/uResolution;
      vec3 color = vec3(0.0);
      float neighbors = 0.0;

      neighbors += GetNeighbours(vUvs);
      
      color = texture2D(uTexture, vUvs).rgb;
      vec2 checkMouse = normMouse - normCoord;
      float alpha = 1.0;
        
        if(abs(checkMouse.x) < .003 && abs(checkMouse.y) < .003){
          color = vec3(0.,0.01,0.);
        }
        
        if(color.g > 0.){
          color = color + vec3(0,.005,0.);
        } else if(neighbors == 3.){
          color = vec3(0.,0.1,0.);
        }

        if(color.g > 4.){
          color = vec3(0.);
        }
        

      gl_FragColor = vec4(color, alpha);
      }
          </script>
          
<script type=module>
    import * as THREE from 'three';

class JulieShader {
    constructor(elementID="Plain") {
        this.version = elementID;
    }

    async initialize() {
        this.renderer = new THREE.WebGLRenderer()
        this.canvasElement = document.getElementById(this.version);
        const resetButton = document.createElement('button');
        resetButton.innerHTML = "Reset";
        resetButton.className = "reset-button";
        resetButton.onclick = () => {
            this.planeMesh.material.uniforms.uTexture.value = this.createDataTexture();
            this.bufferMaterial.uniforms.uTexture.value = this.createDataTexture();
        }
        this.canvasElement.appendChild(this.renderer.domElement)
        this.canvasElement.appendChild(resetButton);

        window.addEventListener('resize', () => {
            this.onWindowResize()
        }, false)

        this.scene = new THREE.Scene();
        this.bufferScene = new THREE.Scene();

        this.dimensions = {
            width: this.canvasElement.clientWidth,
            height: this.canvasElement.clientHeight
        };

        //Screen resolution
        this.resolution = new THREE.Vector3(
            this.dimensions.width,
            this.dimensions.height,
            window.devicePixelRatio
        );


        // Create a new framebuffer we will use to render to
        // the video card memory
        this.renderBufferA = new THREE.WebGLRenderTarget(
            this.dimensions.width,
            this.dimensions.height, {
                minFilter: THREE.NearestFilter,
                magFilter: THREE.NearestFilter,
                format: THREE.RGBAFormat,
                type: THREE.FloatType,
                stencilBuffer: false
            }
        )
        // Create a new framebuffer we will use to render to
        // the video card memory
        this.renderBufferB = new THREE.WebGLRenderTarget(
            this.dimensions.width,
            this.dimensions.height, {
                minFilter: THREE.NearestFilter,
                magFilter: THREE.NearestFilter,
                format: THREE.RGBAFormat,
                type: THREE.FloatType,
                stencilBuffer: false
            }
        )

        this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 100);
        // this.camera = new THREE.PerspectiveCamera(45, this.dimensions.width / this.dimensions.height, 1, 1000);
        // this.camera.position.z = 1;

        await this.setupProject();

        this.previousRAF = null;
        this.onWindowResize();
        this.raf()
    }

    async setupProject() {
        const dataTexture = this.createDataTexture();
        const loader = new THREE.TextureLoader();

        // Buffer Material
        this.bufferMaterial = new THREE.ShaderMaterial({
            uniforms: {
                uTexture: {
                    value: dataTexture
                },
                uResolution: {
                    value: this.resolution
                },
                uMouse: {
                    value: {
                        x: 1.0,
                        y: 1.0
                    }
                },
                uTextureTwo: { type: "t", value: loader.load( "test.png" ) }
            },
            vertexShader: document.getElementById('vertexShader').textContent,
            fragmentShader: document.getElementById(`fragmentShaderBuffer${this.version}`).textContent
        });


        this.material = new THREE.ShaderMaterial({
            uniforms: {
                uTexture: {
                    value: null
                },
                uResolution: {
                    value: this.resolution
                },
                uMouse: {
                    value: {
                        x: 1.0,
                        y: 1.0
                    }
                },
                uTextureTwo: { type: "t", value: loader.load( "test.png" ) }
            },
            vertexShader: document.getElementById('vertexShader').textContent,
            fragmentShader: document.getElementById('fragmentShaderScreen').textContent
        })

        const geometry = new THREE.PlaneGeometry(2, 2);
        // const geometry = new THREE.BoxGeometry(2, 2, 2);

        // Meshes
        this.bufferMesh = new THREE.Mesh(geometry, this.bufferMaterial);
        this.bufferScene.add(this.bufferMesh)


        this.planeMesh = new THREE.Mesh(geometry, this.material)
        this.scene.add(this.planeMesh)

        this.renderer.domElement.addEventListener('mousemove', (e) => {
          const rect = this.renderer.domElement.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;

          this.material.uniforms.uMouse.value.x = x;
          this.material.uniforms.uMouse.value.y = y;
            
          this.bufferMaterial.uniforms.uMouse.value.x = x;
          this.bufferMaterial.uniforms.uMouse.value.y = y;
        })

        this.renderer.domElement.addEventListener('touchmove', (e) => {
          event.preventDefault()
          const rect = this.renderer.domElement.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;

          this.material.uniforms.uMouse.value.x = x;
          this.material.uniforms.uMouse.value.y = y;
            
          this.bufferMaterial.uniforms.uMouse.value.x = x;
          this.bufferMaterial.uniforms.uMouse.value.y = y;
        })
    }

    onWindowResize() {
        // Update renderer
        this.renderer.setSize(this.canvasElement.clientWidth, this.canvasElement.clientHeight)
        // this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))

        this.dimensions.width = this.canvasElement.clientWidth
        this.dimensions.height = this.canvasElement.clientHeight

        // Update camera
        this.camera.updateProjectionMatrix()

        // //update uniforms
        this.material.uniforms.uResolution.value.x = this.dimensions.width
        this.material.uniforms.uResolution.value.y = this.dimensions.height

        this.bufferMaterial.uniforms.uResolution.value.x = this.dimensions.width
        this.bufferMaterial.uniforms.uResolution.value.y = this.dimensions.height
    }

    raf() {
        requestAnimationFrame(t => {
            if (this.previousRAF === null) {
                this.previousRAF = t;
                this.setupProject(t - this.previousRAF)
            }

            // this.planeMesh.rotation.z += .01;

            this.renderer.setRenderTarget(this.renderBufferA);
            this.renderer.render(this.bufferScene, this.camera)

            this.planeMesh.material.uniforms.uTexture.value = this.renderBufferA.texture;

            this.renderer.setRenderTarget(null);
            this.renderer.render(this.scene, this.camera)

            const temp = this.renderBufferA
            this.renderBufferA = this.renderBufferB
            this.renderBufferB = temp
            //output becomes input
            this.bufferMaterial.uniforms.uTexture.value = this.renderBufferB.texture;

            this.raf()
            this.previousRAF = t
        })
    }


    /**
     * CREATE RANDOM NOISY TEXTURE
     */
    createDataTexture() {
        // create a buffer with color data

        var size = this.dimensions.width * this.dimensions.height;
        var data = new Uint8Array(4 * size);

        for (var i = 0; i < size; i++) {
            var stride = i * 4;

            if (Math.random() < 0.01) {
                data[stride] = Math.floor(Math.random() * 255);
                data[stride + 1] = Math.floor(Math.random() * 255);
                data[stride + 2] =Math.floor(Math.random() * 255);
                data[stride + 3] = 255;
            } else {
                data[stride] = 0;
                data[stride + 1] =0;
                data[stride + 2] = 0;
                data[stride + 3] = 255;
            }
            
            data[stride] = 0;
            data[stride + 1] =0;
            data[stride + 2] = 0;
            data[stride + 3] = 255;
        }

        // used the buffer to create a DataTexture

        // console.log(data);
        var texture = new THREE.DataTexture(
            data,
            this.dimensions.width,
            this.dimensions.height,
            THREE.RGBAFormat
        );
        texture.needsUpdate = true;

        return texture;
    }
}

window.mobileCheck = function() {
  let check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

let PLAIN = null
let AGE = null
let DIE = null


window.addEventListener('DOMContentLoaded', async () => {
    PLAIN = new JulieShader("Plain");
    AGE = new JulieShader("Age");
    DIE = new JulieShader("Die");
    
    await PLAIN.initialize()
    await AGE.initialize()
    await DIE.initialize()
})
</script>